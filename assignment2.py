# -*- coding: utf-8 -*-
"""assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-qLRLFwz0xR2LuUS8DpmMin4HfEQKr1
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Load data
train = pd.read_csv('https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3.csv')
test = pd.read_csv('https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3test.csv')

# Define features and target
y = train['meal']
x = train.drop(columns=['meal', 'id', 'DateTime'])

# Ensure test dataset has the same features
if 'meal' in test.columns:
    test = test.drop(columns=['meal'])  # Drop 'meal' if present in the test set

x_test = test.drop(columns=['id', 'DateTime'])

# Verify that x and x_test have the same columns
missing_cols = set(x.columns) - set(x_test.columns)
extra_cols = set(x_test.columns) - set(x.columns)

if missing_cols:
    print("Warning: Missing columns in test data:", missing_cols)
if extra_cols:
    print("Warning: Extra columns in test data:", extra_cols)

# Train-Test Split for internal validation
x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.4, random_state=42)

# Initialize and train Decision Tree model
model = DecisionTreeClassifier(min_samples_leaf=2, random_state=42)
modelFit = model.fit(x_train, y_train)

# In-sample and out-of-sample accuracy
print("In-sample accuracy: %s%%" % str(round(100 * accuracy_score(y_train, modelFit.predict(x_train)), 2)))
print("Validation accuracy: %s%%" % str(round(100 * accuracy_score(y_val, modelFit.predict(x_val)), 2)))

# Make predictions on provided test dataset
pred = modelFit.predict(x_test)

# Ensure predictions are in binary format (0 or 1)
pred = np.round(pred).astype(int)

# Display first few predictions
print("Sample predictions:", pred[:10])